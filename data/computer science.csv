"title","content"
"Rules to Answer","Answer supported by evidence, and reasoning links answer and evidence.<br/>Response is specific and detailed.<br/>Presence of keywords and scientific terminology."
"Rules to Answer","Refer content if unable to recall after 15-30sec of trying, then again retrieve from memory without help."
"<font color=""blue"">Primitive Data Types</font>","Free Recall"
"Primitive Data Types","Data types that are defined by the sytem.<br/>e.g. int, float, double, bool"
"<font color=""blue"">User defined data types</font>","Example"
"User defined data types","Most programming languages allow the users to define their own datatypes. e.g. struct in C"
"<font color=""blue"">Data Structures</font>","Explain"
"Data structure","A particular way of storing and orgainizing data in a computer so that it can be used efficiently"
"<font color=""blue"">Abstract Data Types (ADTs)</font>","Free Recall"
"Abstract Data Types","are of two parts <br/>1. Declaration of data<br/>2.Declaration of operation"
"<font color=""blue"">Asymptotic Notation</font>","Elaborate"
"Asymptotic Notation or Algorithm’s growth rate","are languages that allow us to analyze an algorithm’s running time by identifying its behavior as the input size for the algorithm increases."
"<font color=""blue"">Big-O (O) vs Big-Omega (<font fontName=""Arial"">Ω</font>)</font>","Main idea"
"Big-O","Asymptotic Notation for the worst case, or ceiling of growth for a given function. <br/> Analogy: At most"
"Big-O","Provides us with <b>an asymptotic upper bound</b> for the growth rate of runtime of an algorithm"
"Big-O","Say f(n) is your algorithm runtime, and g(n) is an arbitary time complexity you are trying ot relate to your algorithm"
"Big-O","<b>f(n) is O(g(n))</b>, if for some constants c (c>0) and n<sub>0</sub>, <b>f(n)<=c*g(n)</b> for every input size n(n>n<sub>0</sub>"
"<font color=""blue"">Big-O Examples</font>",
"Big-O Examples","f(n) = 3log n + 100 <br/> g(n) = log n"
"Big-Omega","Best case <br/> Floor growth rate <br/>Asymptotic lower bound <br/> Analogy: At least"
"<font color=""blue"">Big O and Big-Omega</font>","Give the mathematical defination"
"<font fontName=""Arial"" color=""blue"">Small-o and Small-omega (ω)</font>","Elaborate"
"Small-o and Small-omega","Both are not asymptotically tight (no equal to sign)"
"<font fontName=""Arial""color=""blue"">Theta Θ</font>","Explain"
"Theta","Asymptotical tight bound <br/> <br/> c1*g(n) < f(n) < c2*g(n)"
"<font color=""blue"">Recurrence</font>","Main idea"
"Recurrence","An equation that recursively defines a sequence once one or more initial terms are given: each further term of the sequence or array is defined as a function of the preceding terms."
"<font color=""blue"">Recursion vs Recurrence</font>","Explain"
"Recursion vs Recurrence","A recurrence relation uses recursion to create a sequence. Recursion is not limited to generation of sequences."
"Recursion","Recursion is the repeated use of a procedure or action"
"Recurrence","In fact, a recurrence relation uses recursion to define a sequence."
"Recurrence","This sequence is built in such a way that each term is defined as a combination of previous terms. The generation of such a sequence is a requirement in the definition"
"Recurrence","Recurrence is analyzed by telescoping"
"<font color=""blue"">Binary Search</font>","Main Idea"
"Binary Search","Search algorithm that finds the position of a target value within a sorted array"
"Binary Search","Elements are already sorted in ascending order<br/> Divide and Conquer algorithm is used"
"Binary Search","Element x is either in the left half of the array or in the right half or not there at all"
"Binary Search","Compare x to middle element k, <br/>x&gt;k (x not in left half), x&lt;k (x not in right half)"
"<font color=""blue"">Running time of Binary Search</font>","Explain"
"Running time of Binary Search","lg<sub>2</sub>N<br/>binary search runs in O(lgN)"
"<font color=""blue"">One word answer</font>","In computer science you use lg<sub>2</sub>N or lg<sub>10</sub>N"
,"In computer science you use lg<sub>2</sub>N or lg<sub>10</sub>N <br/> <br/> <font color=""green"">lg<sub>2</sub>N</font>"
"<font color=""blue"">Merging</font>","Elaborate"
"Merging","Merging is not a divide and conquer algorithm, but part of mergesort algorithm"
"Merge Sort","Merge Sort is a divide and conquer algorithm"
"Merging","Take two sorted arrays of numbers and make a single array which is sorted of all of those numbers"
"<font color=""blue"">Merge Sort</font>","Type of Algorithm"
"<font color=""blue"">Merge Sort</font>","Explain the complete algorithm"
"Mergesort","First divide the list into smallest unit (1 element), then compare each element with the adjacent list to sort and merge two adjacent lists. Finally all the elements are sorted and merged."
"<font color=""blue"">Run time for mergesort</font>",
"Run time for mergesort","O(n*lgn)"
"<font color=""blue"">Insertion sort vs Mergesort</font>","Which one is better and why?"
"Insertion sort vs Mergesort","Insertion sort is O(n<sup>2</sup>).<br/> Mergesort is O(n*logn). <br/>So, merge-sort is a superior algorithm in terms of its running time on large datasets."
"<font color=""blue"">Algorithm runtime</font>","Insertion sort and Bubble sort"
"Insertion and bubble sort Runtime","Both has <br/> Best: Ω(n)	<br/>Worst: O(n^2)"
